#!/usr/bin/env python3
"""
Run Flask web dashboard with HTTPS/TLS enabled.
Uses certificates generated by setup_https.py or custom certificates.
"""

import sys
import ssl
import logging
import argparse
from pathlib import Path

# Add parent directory to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.web.app import create_app
from src.utils.config import load_config

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def run_https_server(
    config_path: str = None,
    cert_file: str = None,
    key_file: str = None,
    host: str = None,
    port: int = None
):
    """
    Run Flask server with HTTPS enabled.
    
    Args:
        config_path: Path to system configuration file
        cert_file: Path to SSL certificate (overrides config)
        key_file: Path to SSL private key (overrides config)
        host: Host to bind to (overrides config)
        port: Port to bind to (overrides config)
    """
    # Create Flask app
    app = create_app(config_path)
    
    # Load configuration
    if config_path is None:
        config_path = Path(__file__).parent.parent / "config" / "system_config.yaml"
    
    system_config = load_config(str(config_path))
    web_config = system_config.get('web', {})
    
    # Get SSL certificate paths
    if cert_file is None:
        cert_file = web_config.get('cert_file', 'config/certs/cert.pem')
    
    if key_file is None:
        key_file = web_config.get('key_file', 'config/certs/key.pem')
    
    # Convert to absolute paths
    cert_path = Path(cert_file)
    key_path = Path(key_file)
    
    if not cert_path.is_absolute():
        cert_path = Path(__file__).parent.parent / cert_path
    
    if not key_path.is_absolute():
        key_path = Path(__file__).parent.parent / key_path
    
    # Check if certificates exist
    if not cert_path.exists():
        logger.error(f"Certificate file not found: {cert_path}")
        logger.info("Run 'python scripts/setup_https.py' to generate certificates")
        sys.exit(1)
    
    if not key_path.exists():
        logger.error(f"Private key file not found: {key_path}")
        logger.info("Run 'python scripts/setup_https.py' to generate certificates")
        sys.exit(1)
    
    # Get host and port
    if host is None:
        host = web_config.get('host', '0.0.0.0')
    
    if port is None:
        port = web_config.get('port', 5000)
    
    # Create SSL context
    try:
        ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
        ssl_context.load_cert_chain(str(cert_path), str(key_path))
        
        # Security settings
        ssl_context.minimum_version = ssl.TLSVersion.TLSv1_2
        ssl_context.set_ciphers('ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!MD5:!DSS')
        
        logger.info("=" * 60)
        logger.info("AI Home Security System - Web Dashboard (HTTPS)")
        logger.info("=" * 60)
        logger.info(f"Certificate: {cert_path}")
        logger.info(f"Private Key: {key_path}")
        logger.info(f"Server URL:  https://{host}:{port}")
        logger.info("")
        logger.info("⚠️  If using self-signed certificate, you'll see a security warning")
        logger.info("    in your browser. This is expected for development.")
        logger.info("")
        logger.info("Press Ctrl+C to stop the server")
        logger.info("=" * 60)
        logger.info("")
        
        # Run server
        app.run(
            host=host,
            port=port,
            ssl_context=ssl_context,
            debug=web_config.get('debug', False),
            threaded=web_config.get('threaded', True),
            use_reloader=False  # Disable reloader to prevent camera conflicts
        )
        
    except Exception as e:
        logger.error(f"Failed to start HTTPS server: {e}")
        sys.exit(1)


def main():
    parser = argparse.ArgumentParser(
        description='Run AI Security System web dashboard with HTTPS'
    )
    parser.add_argument(
        '--config',
        help='Path to system configuration file (default: config/system_config.yaml)'
    )
    parser.add_argument(
        '--cert',
        help='Path to SSL certificate file (overrides config)'
    )
    parser.add_argument(
        '--key',
        help='Path to SSL private key file (overrides config)'
    )
    parser.add_argument(
        '--host',
        help='Host to bind to (default: from config or 0.0.0.0)'
    )
    parser.add_argument(
        '--port',
        type=int,
        help='Port to bind to (default: from config or 5000)'
    )
    
    args = parser.parse_args()
    
    try:
        run_https_server(
            config_path=args.config,
            cert_file=args.cert,
            key_file=args.key,
            host=args.host,
            port=args.port
        )
    except KeyboardInterrupt:
        logger.info("\nServer stopped by user")
    except Exception as e:
        logger.error(f"Server error: {e}")
        sys.exit(1)


if __name__ == '__main__':
    main()

